// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum BookingStatus {
    BOOKED
    ACCEPTED
    ARRIVED
    PICKED_UP
    IN_TRANSIT
    DELIVERED
    CANCELLED
    FAILED
}

model Booking {
    id String @id @default(cuid())

    user   User   @relation("userBooking", fields: [userId], references: [id])
    userId String

    driver   User?   @relation("driverBooking", fields: [driverId], references: [id])
    driverId String?

    status BookingStatus @default(BOOKED)

    pickupAddress   Address @relation("pickupAddress", fields: [pickupAddressId], references: [id])
    pickupAddressId String

    deliveryAddress   Address @relation("deliveryAddress", fields: [deliveryAddressId], references: [id])
    deliveryAddressId String

    distance Float
    duration Float
    price    Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id          String @id @default(cuid())
    address     String
    nickname    String
    contactName String
    mobile      String
    latitude    Float
    longitude   Float

    user   User   @relation(fields: [userId], references: [id])
    userId String

    pickupBookings  Booking[] @relation("pickupAddress")
    dropoffBookings Booking[] @relation("deliveryAddress")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth -----------------------------------------------
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRoles {
    USER
    DRIVER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role UserRoles?

    addresses      Address[]
    userBookings   Booking[] @relation("userBooking")
    driverBookings Booking[] @relation("driverBooking")

    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
